# ********RoostGPT********
"""
Test generated by RoostGPT for test python-ai-codereviewer using AI Type DBRX and AI Model meta-llama-3-70b-instruct-041824

ROOST_METHOD_HASH=_check_undefined_vars_8c9d170008
ROOST_METHOD_SIG_HASH=_check_undefined_vars_88edf1e4ff


Here are the test scenarios for the `_check_undefined_vars` method:

Scenario 1: No undefined variables
Details:
  TestName: test_no_undefined_variables
  Description: Verify that no feedback is generated when all variables are defined.
Execution:
  Arrange: Initialize an AST tree with defined variables.
  Act: Call `_check_undefined_vars` with the prepared tree.
  Assert: Expect an empty `feedback` list.
Validation:
  This test ensures the function correctly handles the happy path where all variables are defined.

Scenario 2: Single undefined variable
Details:
  TestName: test_single_undefined_variable
  Description: Verify that a single undefined variable is correctly identified and added to the feedback.
Execution:
  Arrange: Initialize an AST tree with a single undefined variable.
  Act: Call `_check_undefined_vars` with the prepared tree.
  Assert: Expect a single feedback message indicating the undefined variable.
Validation:
  This test ensures the function correctly identifies and reports a single undefined variable.

Scenario 3: Multiple undefined variables
Details:
  TestName: test_multiple_undefined_variables
  Description: Verify that multiple undefined variables are correctly identified and added to the feedback.
Execution:
  Arrange: Initialize an AST tree with multiple undefined variables.
  Act: Call `_check_undefined_vars` with the prepared tree.
  Assert: Expect multiple feedback messages, each indicating an undefined variable.
Validation:
  This test ensures the function correctly handles multiple undefined variables.

Scenario 4: Defined variable used in multiple places
Details:
  TestName: test_defined_variable_used_multiple_times
  Description: Verify that a defined variable used in multiple places is not reported as undefined.
Execution:
  Arrange: Initialize an AST tree with a defined variable used in multiple places.
  Act: Call `_check_undefined_vars` with the prepared tree.
  Assert: Expect an empty `feedback` list.
Validation:
  This test ensures the function correctly handles defined variables used multiple times.

Scenario 5: Undefined variable used in multiple places
Details:
  TestName: test_undefined_variable_used_multiple_times
  Description: Verify that an undefined variable used in multiple places is reported only once.
Execution:
  Arrange: Initialize an AST tree with an undefined variable used in multiple places.
  Act: Call `_check_undefined_vars` with the prepared tree.
  Assert: Expect a single feedback message indicating the undefined variable.
Validation:
  This test ensures the function correctly handles undefined variables used multiple times.

Scenario 6: Empty AST tree
Details:
  TestName: test_empty_ast_tree
  Description: Verify that an empty AST tree does not generate any feedback.
Execution:
  Arrange: Initialize an empty AST tree.
  Act: Call `_check_undefined_vars` with the prepared tree.
  Assert: Expect an empty `feedback` list.
Validation:
  This test ensures the function correctly handles an empty AST tree.

Scenario 7: AST tree with no variable nodes
Details:
  TestName: test_ast_tree_no_variable_nodes
  Description: Verify that an AST tree with no variable nodes does not generate any feedback.
Execution:
  Arrange: Initialize an AST tree with no variable nodes.
  Act: Call `_check_undefined_vars` with the prepared tree.
  Assert: Expect an empty `feedback` list.
Validation:
  This test ensures the function correctly handles an AST tree with no variable nodes.
"""

# ********RoostGPT********
import ast
import pytest
from AI_Code_reviewer.ai_code_reviewer import CodeReviewer

@pytest.mark.regression
class Test_CodeReviewerCheckUndefinedVars:
    def setup_method(self):
        self.code_reviewer = CodeReviewer()

    @pytest.mark.valid
    def test_no_undefined_variables(self):
        # Arrange
        python_code = """
        a = 1
        b = 2
        result = a + b
        print(result)
        """
        tree = ast.parse(python_code)
        
        # Act
        self.code_reviewer._check_undefined_vars(tree)
        
        # Assert
        assert self.code_reviewer.feedback == []

    @pytest.mark.valid
    def test_single_undefined_variable(self):
        # Arrange
        python_code = """
        a = 1
        result = a + b
        print(result)
        """
        tree = ast.parse(python_code)
        
        # Act
        self.code_reviewer._check_undefined_vars(tree)
        
        # Assert
        assert self.code_reviewer.feedback == ["Variable 'b' is used but not defined."]

    @pytest.mark.valid
    def test_multiple_undefined_variables(self):
        # Arrange
        python_code = """
        a = 1
        result = a + b + c
        print(result)
        """
        tree = ast.parse(python_code)
        
        # Act
        self.code_reviewer._check_undefined_vars(tree)
        
        # Assert
        assert self.code_reviewer.feedback == ["Variable 'b' is used but not defined.", "Variable 'c' is used but not defined."]

    @pytest.mark.valid
    def test_defined_variable_used_multiple_times(self):
        # Arrange
        python_code = """
        a = 1
        result = a + a
        print(result)
        """
        tree = ast.parse(python_code)
        
        # Act
        self.code_reviewer._check_undefined_vars(tree)
        
        # Assert
        assert self.code_reviewer.feedback == []

    @pytest.mark.valid
    def test_undefined_variable_used_multiple_times(self):
        # Arrange
        python_code = """
        result = a + a
        print(result)
        """
        tree = ast.parse(python_code)
        
        # Act
        self.code_reviewer._check_undefined_vars(tree)
        
        # Assert
        assert self.code_reviewer.feedback == ["Variable 'a' is used but not defined."]

    @pytest.mark.valid
    def test_empty_ast_tree(self):
        # Arrange
        tree = ast.Module(body=[])  # empty AST tree
        
        # Act
        self.code_reviewer._check_undefined_vars(tree)
        
        # Assert
        assert self.code_reviewer.feedback == []

    @pytest.mark.valid
    def test_ast_tree_no_variable_nodes(self):
        # Arrange
        python_code = """
        def add(a, b):
            pass
        """
        tree = ast.parse(python_code)
        
        # Act
        self.code_reviewer._check_undefined_vars(tree)
        
        # Assert
        assert self.code_reviewer.feedback == []
